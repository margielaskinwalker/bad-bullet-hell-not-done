//SFML C++ Bullet Hell
// Created by Dr. Mo Jan 2022
//dynamicsofanasteroid.com

#include<iostream>
#include "SFML/Graphics.hpp"
#include "globals.h"
#include"missiles.h"
#include"background.h"
#include "player.h"

using namespace std;

//enum DIRECTIONS { LEFT, RIGHT, UP, DOWN }; //left is 0, right is 1, up is 2, down is 3

int main() {
    //game set up (you'll need these lines in every game)
    sf::RenderWindow screen(sf::VideoMode(800, 800), "bad game"); //set up screen
    sf::Event event; //set up event queue
    sf::Clock clock; //set up the clock (needed for game timing)
    const float FPS = 60.0f; //FPS
    screen.setFramerateLimit(FPS); //set FPS



    //player setup------------------------------------------------
    //sf::Texture ship;
    //ship.loadFromFile("ship.png");
    //sf::IntRect playerImg(0, 0, 30, 30); //select portion of image to draw (our ship is 30x30)
    //sf::Sprite player(ship, playerImg);
    // player.setTexture(ship); //use this instead of 2 lines above for static images
    //int xpos = 400;
    //int ypos = 700;
    //int vx = 0;
    //int vy = 0;
    //player.setPosition(xpos, ypos); //top left "corner" of circle (not center!)
    //bool keys[] = { false, false, false, false };
    //bool shoot[] = { false };

    // things
    playerEntity player;
    background galaxy;
    galaxy.Initialize();
    player.Initialize();


    //################### HOLD ONTO YOUR BUTTS, ITS THE GAME LOOP###############################################################
    while (screen.isOpen()) {//keep window open until user shuts it down

        while (screen.pollEvent(event)) { //look for events-----------------------

            if (event.type == sf::Event::EventType::Closed)
                screen.close();



           /* //this checks if the user has clicked the little "x" button in the top right corner
            if (event.type == sf::Event::EventType::Closed)
                screen.close();

            //KEYBOARD INPUT
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
                keys[LEFT] = true;
            }
            else keys[LEFT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
                keys[RIGHT] = true;
            }
            else keys[RIGHT] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                keys[UP] = true;
            }
            else keys[UP] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                keys[DOWN] = true;
            }
            else keys[DOWN] = false;

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space)) {
                keys[DOWN] = true;
            }
            else keys[DOWN] = false;


        }//end event loop---------------------------------------------------------------

         //move ship
        if (keys[LEFT] == true) {
            vx = -5;
        }
        else if (keys[RIGHT] == true) {
            vx = 5;
        }
        else vx = 0;

        if (keys[UP] == true) {
            vy = -5;
        }
        else if (keys[DOWN] == true) {
            vy = 5;
        }
        else vy = 0;
        ypos += vy;
        xpos += vx;
        player.setPosition(xpos, ypos);
        */





        }
        galaxy.Move();
        player.Move();

        //render section-----------------------------------------
            screen.clear(); //wipes screen, without this things smear
            galaxy.Draw(&screen, player.getOffset());
            player.Draw(&screen); //draw player
            screen.display(); //flips memory drawings onto screen

        }//######################## end game loop ###################################################################################
    
        cout << "goodbye!" << endl;
    } //end of main
